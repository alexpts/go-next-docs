import{_ as c,a as i}from"./401-d82a7087.js";import{_ as l,M as p,p as u,q as d,R as n,N as a,V as e,t as s,a1 as r}from"./framework-96b046e1.js";const k={},v=n("h1",{id:"quick-start",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#quick-start","aria-hidden":"true"},"#"),s(" Quick Start")],-1),h={class:"table-of-contents"},b=n("hr",null,null,-1),m={class:"custom-container tip"},g=n("p",{class:"custom-container-title"},"Предыстория",-1),f={href:"https://github.com/alexpts/php-next2",target:"_blank",rel:"noopener noreferrer"},x=r(`<h2 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> Hello World</h2><p>Минимальное приложение выглядит так:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;github.com/valyala/fasthttp&quot;</span>

	<span class="token string">&quot;github.com/alexpts/go-next/next&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	app <span class="token operator">:=</span> next<span class="token punctuation">.</span><span class="token function">NewApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	app<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>next<span class="token punctuation">.</span>HandlerCxt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		ctx<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">AppendBodyString</span><span class="token punctuation">(</span><span class="token string">\`Hello\`</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	server <span class="token operator">:=</span> <span class="token operator">&amp;</span>fasthttp<span class="token punctuation">.</span>Server<span class="token punctuation">{</span>
		Handler<span class="token punctuation">:</span> app<span class="token punctuation">.</span>FasthttpHandler<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token boolean">_</span> <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:3000&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="glossary" tabindex="-1"><a class="header-anchor" href="#glossary" aria-hidden="true">#</a> Glossary</h2><h4 id="middleware" tabindex="-1"><a class="header-anchor" href="#middleware" aria-hidden="true">#</a> Middleware</h4><p>Middleware - это часть приложения, которая отвечает за конкретную единицу логики в обработке request/response.</p><h4 id="layer" tabindex="-1"><a class="header-anchor" href="#layer" aria-hidden="true">#</a> Layer</h4><p>Это абстракция которая является по сути middleware. Layer может иметь как 1 обработчик, так и несколько, чтобы декомпозировать на более мелкие части код.</p><h4 id="application" tabindex="-1"><a class="header-anchor" href="#application" aria-hidden="true">#</a> Application</h4><p>Приложение является самым высоким уровнем и реалзиует полноую обработку запроса. Приложение это набор Layers, которые определяются для каждого http запроса индивидуально. Задача приложения получить на входе http request и создать http response.</p><p>Приложение осознано сводит число сущностей к минимуму, чтобы оставаться действительно простым, понятным и надежным. Основное понятие с которым придется постоянно работать это Layer (Слой).</p><p>Приложеине получает на вход объект <code>fasthttp.RequestCtx</code> и прогоняет через все обработчики слоев. Какие именно слои примут частие в обработке запроса определяется метаифнормацией слоя. Семантически можно выделить следующие типы слоев:</p><ul><li>Активация на любом запросе</li><li>Активация по http методу</li><li>Активация по соответствию uri в регулярном выражении</li><li>Актичация по кастомной стратегии</li></ul><details class="custom-container details"><summary>Собственные стратегии</summary><p>Из коробки идет минимальный набор стратений (по http методу и поиск по uri). Можно дополнительно реализовать любые кастомные правила, по которым будет принято решение активировать ли слоя для обработки запроса или нет. Для этого нужно добавить свою реализацию <code>next.ResolverContract</code></p></details><h2 id="layers-store" tabindex="-1"><a class="header-anchor" href="#layers-store" aria-hidden="true">#</a> Layers Store</h2><p>Приложение <code>MicroApp</code> хранит в себе в свойстве <code>LayersStore</code> хранилище слоев. Хранилище слоев позволяет добавлять обрабочтики к приложению посредством методов <code>Use</code>, <code>AddLayer</code>, <code>Get</code>, <code>Post</code> и др :</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>    app <span class="token operator">:=</span> <span class="token function">NewApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	
    app<span class="token punctuation">.</span>LayersStore<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>layer<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>layer<span class="token punctuation">.</span>Ctx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
      ctx<span class="token punctuation">.</span>FCtx<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">AppendBodyString</span><span class="token punctuation">(</span><span class="token string">\`Hello\`</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token boolean">nil</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="handler" tabindex="-1"><a class="header-anchor" href="#handler" aria-hidden="true">#</a> Handler</h3><p>Функция обработчик в общем случае принмает 1 аргумент.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Handler <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>layer<span class="token punctuation">.</span>Ctx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Context</p><p>Контекст - это связующая часть между всеми слоями. Базовый контекст хранит request, response и позволяет получить доступ к текущему слою (Layer) в runtime. В контексте можно хранить все что угодно, <s>расширяя его дочерним классом и не ограничивая себя</s>.</p></div><p>Чтобы делегировать управление следующему обработчику, нужно вызвать метод <code>Next</code> на объекте контекста:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>    app <span class="token operator">:=</span> <span class="token function">NewApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    app<span class="token punctuation">.</span>LayersStore<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>layer<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>layer<span class="token punctuation">.</span>Ctx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
      ctx<span class="token punctuation">.</span>FCtx<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">AppendBodyString</span><span class="token punctuation">(</span><span class="token string">\`Hello\`</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Слоенный подход</p><p>Каждый слой имеет 1 определенную зону отвественности, это позволяет оставаться вашему коду простым и чистым. Слой может самостоятельно создать http response и не передавать управление следующему слою. Например слой, который проверяет аунтификацию, может сам создать http response с статус кодом <code>401</code>. С таким подходом, мы можем очень быстро обрабатывать некоторые запросы.</p><p>Другой пример, это обработчик, который может кешировать запрос и повторно очень быстро отвечать на запрос из кеша.</p></div><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> Options</h3><p>Опции объекта Layer</p><table><thead><tr><th>Опция</th><th>Описание</th><th>По умолчанию</th><th>Пример значения</th></tr></thead><tbody><tr><td><strong>Path</strong></td><td>описывает uri путь, на который должен активироваться слой, можро использловать регулярки, без указария этого параметра слой активируется на любой uri</td><td>-</td><td><code>/users/{id}/</code></td></tr><tr><td><strong>Name</strong></td><td>определяем уникальное имя слоя, через это имя можно будет найти слой (по умолчанию все слои получают имена вида <code>l-0</code>, <code>l-1</code>, <code>l-2</code>, и т.д.)</td><td>-</td><td><code>usersAction</code></td></tr><tr><td><strong>Methods</strong></td><td>принимает массив из http методов, слой активируется только на http запросы с указанными http методами. Если методы не переданы, то слой активируется на любой http метод</td><td><code>[]</code></td><td><code>[&#39;GET&#39;]</code></td></tr><tr><td><strong>Priority</strong></td><td>принимает <code>int</code> число с приоритетом, чем ни меньше число, тем раньше выполнится слой. Это позволяет конфигурировать слои декларативно, не в порядке добавления</td><td><code>50</code></td><td><code>100</code></td></tr><tr><td><strong>Restrictions</strong></td><td>принимает массив вида [&#39;id&#39; =&gt; \\id+], позволяя накладывать дополнительные ограничения на переменны в uri запроса</td><td><code>[]</code></td><td><code>[&#39;id&#39;=&gt;&#39;\\d+&#39;]</code></td></tr><tr><td><strong>Context</strong></td><td>позволяет прикрепить к слою любые произволные данные</td><td><code>[]</code></td><td><code>[&#39;foo&#39;=&gt;&#39;bar&#39;]</code></td></tr></tbody></table><p>Пример использования options в коде:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;github.com/valyala/fasthttp&quot;</span>

	<span class="token string">&quot;github.com/alexpts/go-next/next&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	app <span class="token operator">:=</span> next<span class="token punctuation">.</span><span class="token function">NewApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	handler <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>next<span class="token punctuation">.</span>HandlerCxt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		name<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">UriParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span>
		ctx<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">AppendBodyString</span><span class="token punctuation">(</span><span class="token string">\`Hello \`</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	app<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
		<span class="token string">\`Path\`</span><span class="token punctuation">:</span>     <span class="token string">\`/hello/{name}/\`</span><span class="token punctuation">,</span>
		<span class="token string">\`Name\`</span><span class="token punctuation">:</span>     <span class="token string">\`HelloAction\`</span><span class="token punctuation">,</span>
		<span class="token string">\`Methods\`</span><span class="token punctuation">:</span>  <span class="token string">\`GET|POST\`</span><span class="token punctuation">,</span>
		<span class="token string">\`Priority\`</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
		<span class="token string">\`Restrictions\`</span><span class="token punctuation">:</span> next<span class="token punctuation">.</span>Restrictions<span class="token punctuation">{</span>
			<span class="token string">\`name\`</span><span class="token punctuation">:</span> <span class="token string">\`[a-z]+\`</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span>

	server <span class="token operator">:=</span> <span class="token operator">&amp;</span>fasthttp<span class="token punctuation">.</span>Server<span class="token punctuation">{</span>
		Handler<span class="token punctuation">:</span> app<span class="token punctuation">.</span>FasthttpHandler<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token boolean">_</span> <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:3000&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fast-http-methods" tabindex="-1"><a class="header-anchor" href="#fast-http-methods" aria-hidden="true">#</a> Fast http methods</h3><p>Для упрощения также доступны методы, которые зеркалируют основные http методы, например:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>app <span class="token operator">:=</span> <span class="token function">NewApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

handler <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>layer<span class="token punctuation">.</span>Ctx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span>LayersStore<span class="token punctuation">.</span>
	<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">\`/users/{id}/\`</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">.</span>
	<span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">\`/users/{id}/\`</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">.</span>
	<span class="token function">Put</span><span class="token punctuation">(</span><span class="token string">\`/users/{id}/\`</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">.</span>
	<span class="token function">Patch</span><span class="token punctuation">(</span><span class="token string">\`/users/{id}/\`</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">.</span>
	<span class="token function">Delete</span><span class="token punctuation">(</span><span class="token string">\`/users/{id}/\`</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="declarative-configuration" tabindex="-1"><a class="header-anchor" href="#declarative-configuration" aria-hidden="true">#</a> Declarative configuration</h3><p>Очень удобно конфигурировать маршруты и порядок декларативно, например посредством yml файлов, простой пример такой конфигурации выглядит так:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># middlewares</span>
  @todo добавить пример

<span class="token comment"># 404 page</span>
  @todo добавить пример

<span class="token comment"># actions</span>
  @todo добавить пример
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Можно написать свою стратегию, по которой декларативно будет настроены слои, посредством реалзиации <code>FactoryContract</code></p><h3 id="flow" tabindex="-1"><a class="header-anchor" href="#flow" aria-hidden="true">#</a> Flow</h3><p>Каждый слой может что-то делать до вызова <code>ctx-&gt;Next()</code> на этапе запроса, также может что-то делать после вызова <code>ctx-&gt;Next()</code> на этапе ответа. Пример полного выполнения запроса, который проходит сквозь все слои:</p><p><img src="`+c+'" alt="200 flow"></p><p>Пример flow, кога запрос досрочно может быть обработан одним из слоев, без делегирования обработки через <code>ctx-&gt;Next()</code>:</p><p><img src="'+i+`" alt="401 flow"></p><p>Каждый слой решает сам, создать http response и пректатить обработку, либо вызвать следующий слой и делегировать ему тем самым обработку.</p><h2 id="fasthttp" tabindex="-1"><a class="header-anchor" href="#fasthttp" aria-hidden="true">#</a> Fasthttp</h2><h3 id="integration" tabindex="-1"><a class="header-anchor" href="#integration" aria-hidden="true">#</a> Integration</h3><p>Приложение реализует интерфейс обработчика <code>fasthttp.RequestCtx</code>. За счет этого оно может интегрировться в любые приложения fasthttp как middleware, принимая на вход <code>fasthttp.RequestCtx</code>.</p><p>Схематично это выглядит как <code>fasthttp</code> -&gt; <code>fasthttp</code> -&gt; <code>next</code>.</p><hr><p>Если микро приложение должно делегировать обработку запроса далее в классическое <code>fasthttp</code> приложение, то можно обернуть в такую middleware:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;github.com/valyala/fasthttp&quot;</span>

	next2 <span class="token string">&quot;github.com/alexpts/go-next/next&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">appToFasthttpMiddleware</span><span class="token punctuation">(</span>app next2<span class="token punctuation">.</span>App<span class="token punctuation">,</span> handler fasthttp<span class="token punctuation">.</span>RequestHandler<span class="token punctuation">)</span> fasthttp<span class="token punctuation">.</span>RequestHandler <span class="token punctuation">{</span>
	app<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>next2<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>next2<span class="token punctuation">.</span>HandlerCxt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">handler</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>RequestCtx<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> app<span class="token punctuation">.</span>FasthttpHandler
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">handler1</span><span class="token punctuation">(</span>requestHandler fasthttp<span class="token punctuation">.</span>RequestHandler<span class="token punctuation">)</span> fasthttp<span class="token punctuation">.</span>RequestHandler <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>fasthttp<span class="token punctuation">.</span>RequestCtx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		ctx<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">AppendBodyString</span><span class="token punctuation">(</span><span class="token string">\`fasthttp-1-\`</span><span class="token punctuation">)</span>
		<span class="token function">requestHandler</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">handler2</span><span class="token punctuation">(</span>requestHandler fasthttp<span class="token punctuation">.</span>RequestHandler<span class="token punctuation">)</span> fasthttp<span class="token punctuation">.</span>RequestHandler <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>fasthttp<span class="token punctuation">.</span>RequestCtx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		ctx<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">AppendBodyString</span><span class="token punctuation">(</span><span class="token string">\`fasthttp-2-\`</span><span class="token punctuation">)</span>
		<span class="token function">requestHandler</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">handler3</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>fasthttp<span class="token punctuation">.</span>RequestCtx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ctx<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">AppendBodyString</span><span class="token punctuation">(</span><span class="token string">\`fasthttp-3-\`</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	app <span class="token operator">:=</span> next2<span class="token punctuation">.</span><span class="token function">NewApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	app<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>next2<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>next2<span class="token punctuation">.</span>HandlerCxt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		ctx<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">AppendBodyString</span><span class="token punctuation">(</span><span class="token string">\`next-1-\`</span><span class="token punctuation">)</span>
		ctx<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	afterHandler <span class="token operator">:=</span> <span class="token function">handler2</span><span class="token punctuation">(</span>handler3<span class="token punctuation">)</span>
	appHandler <span class="token operator">:=</span> <span class="token function">appToFasthttpMiddleware</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> afterHandler<span class="token punctuation">)</span> <span class="token comment">// app as middleware of fasthttp + delegate to next handler</span>
	allHandler <span class="token operator">:=</span> <span class="token function">handler1</span><span class="token punctuation">(</span>appHandler<span class="token punctuation">)</span>

	server <span class="token operator">:=</span> <span class="token operator">&amp;</span>fasthttp<span class="token punctuation">.</span>Server<span class="token punctuation">{</span>
		Handler<span class="token punctuation">:</span> allHandler<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token boolean">_</span> <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:3000&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Схематично это выглядит как <code>fasthttp (handler1)</code> -&gt; <code>next</code> -&gt; <code>fasthttp (handler2)</code> -&gt; <code>fasthttp (handler 3)</code>.</p><p>Такие интеграции позволяют точечно заменять части старого приложения или переносить небольшими кусочками часть функционала.</p>`,51);function y(w,_){const t=p("router-link"),o=p("ExternalLinkIcon");return u(),d("div",null,[v,n("nav",h,[n("ul",null,[n("li",null,[a(t,{to:"#hello-world"},{default:e(()=>[s("Hello World")]),_:1})]),n("li",null,[a(t,{to:"#glossary"},{default:e(()=>[s("Glossary")]),_:1})]),n("li",null,[a(t,{to:"#layers-store"},{default:e(()=>[s("Layers Store")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#handler"},{default:e(()=>[s("Handler")]),_:1})]),n("li",null,[a(t,{to:"#options"},{default:e(()=>[s("Options")]),_:1})]),n("li",null,[a(t,{to:"#fast-http-methods"},{default:e(()=>[s("Fast http methods")]),_:1})]),n("li",null,[a(t,{to:"#declarative-configuration"},{default:e(()=>[s("Declarative configuration")]),_:1})]),n("li",null,[a(t,{to:"#flow"},{default:e(()=>[s("Flow")]),_:1})])])]),n("li",null,[a(t,{to:"#fasthttp"},{default:e(()=>[s("Fasthttp")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#integration"},{default:e(()=>[s("Integration")]),_:1})])])])])]),b,n("div",m,[g,n("p",null,[s("Next является портированой версией микрофреймворка "),n("a",f,[s("php-next2"),a(o)]),s(".")])]),x])}const C=l(k,[["render",y],["__file","index.html.vue"]]);export{C as default};
